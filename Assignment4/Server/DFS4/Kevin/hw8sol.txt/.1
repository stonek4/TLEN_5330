Homework 8:
Team members: Kevin Stoner (stonek4@rpi.edu)

Query costs before tuning
(ran on my Lenovo T430):

      First     All
Q1    145.92    148.48
Q2    188.46    323.79
Q3    23046.10  174361.22
Q4    11688.28  11689.03
Q5    0.57      681.32
Q6    14960.93  14960.95
__________________________
Total:50030.26  202164.79

Indices created:

create index r_idx on imdbratings(rating);
cluster imdbratings using r_idx;
create index tr_idx on twitterratings(rating);
cluster twitterratings using tr_idx;
create index tr2_idx on twitterratings(userid);
create index mr_idx on movieroles(actorid);
create index mr2_idx on movieroles(movieid);

Re-write Question 3:
explain SELECT
  m.id,
  m.name,
  avg(t.rating)::numeric(4,2)
FROM
  movies m JOIN twitterratings t ON m.id = t.movieid
GROUP BY
  m.id
HAVING
  avg(t.rating) =
  (SELECT
    avg(t.rating)
  FROM
    movies m JOIN twitterratings t ON m.id = t.movieid
  GROUP BY
    m.id
  ORDER BY
    avg(t.rating)
  LIMIT
    1);

Query plans effected (an index may impact more than one query):

QUESTION 1:

 Not effected

QUESTION 2 QUERY PLAN:

Hash Join  (cost=10.41..145.75 rows=60 width=28)
   Hash Cond: (m.id = r.movieid)
   InitPlan 2 (returns $1)
     ->  Result  (cost=0.32..0.33 rows=1 width=0)
           InitPlan 1 (returns $0)
             ->  Limit  (cost=0.28..0.32 rows=1 width=8)
                   ->  Index Only Scan u